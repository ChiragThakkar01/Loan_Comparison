# -*- coding: utf-8 -*-
"""LCT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ADYxT_9J7qcExxNUmYfRbcdnfOw9okt_
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# ——— Page Config —————————————————————————————————————————————
st.set_page_config(
    page_title="Loan Comparison Tool",
    page_icon="🏦",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("🏦 Loan Comparison Tool")
st.markdown("""
Compare multiple loan offers side by side to find the most cost‑effective option.
You can either **manually enter** loan details or **upload** a CSV with your offers.
""")

# ——— Sidebar: CSV Upload ———————————————————————————————————————
st.sidebar.header("Upload Loan Offers CSV")
uploaded_file = st.sidebar.file_uploader(
    "Upload a CSV file with columns: amount, rate, tenure_years",
    type=["csv"]
)
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    required_cols = {"amount", "rate", "tenure_years"}
    if not required_cols.issubset(df.columns):
        st.sidebar.error(f"CSV must contain columns: {required_cols}")
        st.stop()
    st.sidebar.success("CSV loaded! Scroll down to see comparison.")
else:
    df = None

# ——— Main: Manual Entry Form ———————————————————————————————————
if df is None:
    st.header("🔢 Manual Loan Entry")
    num = st.selectbox("How many loan options to compare?", [2, 3], index=0)

    data = []
    with st.form("loan_form", clear_on_submit=False):
        cols = st.columns(num)
        for i, col in enumerate(cols, start=1):
            with col:
                st.subheader(f"Option {i}")
                amt = st.number_input(f"Amount (₹) — Option {i}", min_value=1000, step=1000, key=f"amt{i}")
                rate = st.number_input(f"Annual Rate (%) — Option {i}", min_value=0.1, max_value=30.0, step=0.1, key=f"rate{i}")
                tenure = st.number_input(f"Tenure (Years) — Option {i}", min_value=1, max_value=30, step=1, key=f"tenure{i}")
                data.append({"amount": amt, "rate": rate, "tenure_years": tenure})
        submitted = st.form_submit_button("▶ Compare Loans")

    if submitted:
        df = pd.DataFrame(data)

# ——— Compute EMI & Totals —————————————————————————————————————
if df is not None:
    df = df.copy()
    df["monthly_rate"] = df["rate"] / (12 * 100)
    df["months"] = df["tenure_years"] * 12

    def calc_emi(P, r, n):
        return (P * r * (1 + r) ** n) / ((1 + r) ** n - 1)

    df["EMI"] = df.apply(lambda row: calc_emi(row["amount"], row["monthly_rate"], row["months"]), axis=1)
    df["Total Payment"] = df["EMI"] * df["months"]
    df["Total Interest"] = df["Total Payment"] - df["amount"]
    df["Option"] = [f"Loan {i}" for i in range(1, len(df) + 1)]

    # ——— Display Table —————————————————————————————————————
    st.markdown("## 📊 Comparison Summary")
    display_df = df[["Option", "amount", "rate", "tenure_years", "EMI", "Total Interest", "Total Payment"]]
    display_df.columns = [
        "Option", "Amount (₹)", "Rate (%)", "Tenure (Yrs)",
        "Monthly EMI (₹)", "Total Interest (₹)", "Total Payment (₹)"
    ]
    st.dataframe(display_df.set_index("Option"), use_container_width=True)

    # ——— Plots —————————————————————————————————————————————
    st.markdown("## 📈 Visual Comparison")
    fig, axes = plt.subplots(1, 2, figsize=(12, 4), tight_layout=True)

    axes[0].bar(display_df["Option"], display_df["Monthly EMI (₹)"])
    axes[0].set_title("Monthly EMI")
    axes[0].set_ylabel("₹")

    axes[1].bar(display_df["Option"], display_df["Total Interest (₹)"])
    axes[1].set_title("Total Interest Paid")
    axes[1].set_ylabel("₹")

    st.pyplot(fig)

    # ——— Download Results ————————————————————————————————————
    csv = display_df.to_csv().encode("utf-8")
    st.download_button(
        label="📥 Download Comparison as CSV",
        data=csv,
        file_name="loan_comparison.csv",
        mime="text/csv"
    )

st.markdown("---")
st.markdown("Built with ❤️ using Streamlit • 2025")