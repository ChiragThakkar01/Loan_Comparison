# -*- coding: utf-8 -*-
"""LCT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ADYxT_9J7qcExxNUmYfRbcdnfOw9okt_
"""
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# --- PAGE CONFIG ---
st.set_page_config(
    page_title="Loan Comparison Tool",
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- CUSTOM DARK THEME WITH WHITE TEXT ---
st.markdown("""
    <style>
        body, .stApp {
            background-color: #000000;
            color: white;
        }
        h1, h2, h3, h4, h5, h6, label, p {
            color: white !important;
        }
        .st-cw, .st-bb, .st-eb, .st-dc {
            color: white !important;
        }
        .input-box label {
            color: white !important;
        }
        input, textarea, .stNumberInput input {
            background-color: white !important;
            color: black !important;
        }
        .stSelectbox, .stRadio, .stFileUploader {
            color: black !important;
        }
    </style>
""", unsafe_allow_html=True)

# --- TITLE & DESCRIPTION ---
st.markdown("<h1 style='text-align: center;'>üè¶ Loan Comparison Tool</h1>", unsafe_allow_html=True)
st.markdown("""
    <p style='text-align: center;'>Compare multiple loan offers side by side to find the most cost‚Äëeffective option.<br>
    You can either <b>manually enter</b> loan details or <b>upload</b> a CSV with your offers.</p>
""", unsafe_allow_html=True)

# --- SIDEBAR: CSV UPLOAD ---
st.sidebar.header("üì§ Upload Loan Offers CSV")
uploaded_file = st.sidebar.file_uploader(
    "Upload a CSV file with columns: amount, rate, tenure_years",
    type=["csv"]
)
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    required_cols = {"amount", "rate", "tenure_years"}
    if not required_cols.issubset(df.columns):
        st.sidebar.error(f"CSV must contain columns: {required_cols}")
        st.stop()
    st.sidebar.success("‚úÖ CSV loaded! Scroll down to see comparison.")
else:
    df = None

# --- MANUAL ENTRY ---
if df is None:
    st.markdown("<h2>üî¢ Manually Enter Loan Options</h2>", unsafe_allow_html=True)
    num = st.radio("Select number of options to compare:", [2, 3], horizontal=True)

    data = []
    with st.form("loan_form", clear_on_submit=False):
        cols = st.columns(num)
        for i, col in enumerate(cols, start=1):
            with col:
                st.markdown(f"<h4 style='color:white;'>üìù Option {i}</h4>", unsafe_allow_html=True)

                amt = st.number_input("Loan Amount (‚Çπ)", min_value=1000, step=1000, key=f"amt{i}")
                rate = st.number_input("Annual Interest Rate (%)", min_value=0.1, max_value=30.0, step=0.1, key=f"rate{i}")
                tenure = st.number_input("Tenure (Years)", min_value=1, max_value=30, step=1, key=f"tenure{i}")

                data.append({"amount": amt, "rate": rate, "tenure_years": tenure})

        submitted = st.form_submit_button("‚ñ∂ Compare Loans")

    if submitted:
        df = pd.DataFrame(data)

# --- CALCULATE EMI & TOTALS ---
if df is not None:
    df = df.copy()
    df["monthly_rate"] = df["rate"] / (12 * 100)
    df["months"] = df["tenure_years"] * 12

    def calc_emi(P, r, n):
        return (P * r * (1 + r) ** n) / ((1 + r) ** n - 1)

    df["EMI"] = df.apply(lambda row: calc_emi(row["amount"], row["monthly_rate"], row["months"]), axis=1)
    df["Total Payment"] = df["EMI"] * df["months"]
    df["Total Interest"] = df["Total Payment"] - df["amount"]
    df["Option"] = [f"Loan {i}" for i in range(1, len(df) + 1)]

    # --- SUMMARY TABLE ---
    st.markdown("## üìä Comparison Summary")
    display_df = df[["Option", "amount", "rate", "tenure_years", "EMI", "Total Interest", "Total Payment"]]
    display_df.columns = [
        "Option", "Amount (‚Çπ)", "Rate (%)", "Tenure (Yrs)",
        "Monthly EMI (‚Çπ)", "Total Interest (‚Çπ)", "Total Payment (‚Çπ)"
    ]
    st.dataframe(display_df.set_index("Option"), use_container_width=True)

    # --- VISUALIZATION ---
    st.markdown("## üìà Visual Comparison")
    fig, axes = plt.subplots(1, 2, figsize=(12, 4), tight_layout=True)

    axes[0].bar(display_df["Option"], display_df["Monthly EMI (‚Çπ)"], color="#4CAF50")
    axes[0].set_title("Monthly EMI", color='white')
    axes[0].set_ylabel("‚Çπ", color='white')
    axes[0].tick_params(colors='white')

    axes[1].bar(display_df["Option"], display_df["Total Interest (‚Çπ)"], color="#FF9800")
    axes[1].set_title("Total Interest Paid", color='white')
    axes[1].set_ylabel("‚Çπ", color='white')
    axes[1].tick_params(colors='white')

    fig.patch.set_facecolor('#000000')
    for ax in fig.axes:
        ax.set_facecolor("#000000")
        ax.title.set_color("white")
        ax.xaxis.label.set_color("white")
        ax.yaxis.label.set_color("white")

    st.pyplot(fig)

    # --- DOWNLOAD ---
    csv = display_df.to_csv(index=False).encode("utf-8")
    st.download_button(
        label="üì• Download Comparison as CSV",
        data=csv,
        file_name="loan_comparison.csv",
        mime="text/csv"
    )

# --- FOOTER ---
st.markdown("---")
st.markdown("<p style='text-align: center; color: gray;'>Made with ‚ù§Ô∏è using Streamlit ‚Ä¢ 2025</p>", unsafe_allow_html=True)
